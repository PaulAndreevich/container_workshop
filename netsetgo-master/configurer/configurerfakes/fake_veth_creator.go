// This file was generated by counterfeiter
package configurerfakes

import (
	"net"
	"sync"

	"github.com/teddyking/netsetgo/configurer"
)

type FakeVethCreator struct {
	CreateStub        func(vethNamePrefix string) (*net.Interface, *net.Interface, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		vethNamePrefix string
	}
	createReturns struct {
		result1 *net.Interface
		result2 *net.Interface
		result3 error
	}
	MoveToNetworkNamespaceStub        func(containerVeth *net.Interface, pid int) error
	moveToNetworkNamespaceMutex       sync.RWMutex
	moveToNetworkNamespaceArgsForCall []struct {
		containerVeth *net.Interface
		pid           int
	}
	moveToNetworkNamespaceReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVethCreator) Create(vethNamePrefix string) (*net.Interface, *net.Interface, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		vethNamePrefix string
	}{vethNamePrefix})
	fake.recordInvocation("Create", []interface{}{vethNamePrefix})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(vethNamePrefix)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2, fake.createReturns.result3
	}
}

func (fake *FakeVethCreator) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeVethCreator) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].vethNamePrefix
}

func (fake *FakeVethCreator) CreateReturns(result1 *net.Interface, result2 *net.Interface, result3 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *net.Interface
		result2 *net.Interface
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeVethCreator) MoveToNetworkNamespace(containerVeth *net.Interface, pid int) error {
	fake.moveToNetworkNamespaceMutex.Lock()
	fake.moveToNetworkNamespaceArgsForCall = append(fake.moveToNetworkNamespaceArgsForCall, struct {
		containerVeth *net.Interface
		pid           int
	}{containerVeth, pid})
	fake.recordInvocation("MoveToNetworkNamespace", []interface{}{containerVeth, pid})
	fake.moveToNetworkNamespaceMutex.Unlock()
	if fake.MoveToNetworkNamespaceStub != nil {
		return fake.MoveToNetworkNamespaceStub(containerVeth, pid)
	} else {
		return fake.moveToNetworkNamespaceReturns.result1
	}
}

func (fake *FakeVethCreator) MoveToNetworkNamespaceCallCount() int {
	fake.moveToNetworkNamespaceMutex.RLock()
	defer fake.moveToNetworkNamespaceMutex.RUnlock()
	return len(fake.moveToNetworkNamespaceArgsForCall)
}

func (fake *FakeVethCreator) MoveToNetworkNamespaceArgsForCall(i int) (*net.Interface, int) {
	fake.moveToNetworkNamespaceMutex.RLock()
	defer fake.moveToNetworkNamespaceMutex.RUnlock()
	return fake.moveToNetworkNamespaceArgsForCall[i].containerVeth, fake.moveToNetworkNamespaceArgsForCall[i].pid
}

func (fake *FakeVethCreator) MoveToNetworkNamespaceReturns(result1 error) {
	fake.MoveToNetworkNamespaceStub = nil
	fake.moveToNetworkNamespaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeVethCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.moveToNetworkNamespaceMutex.RLock()
	defer fake.moveToNetworkNamespaceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeVethCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ configurer.VethCreator = new(FakeVethCreator)
